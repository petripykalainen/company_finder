---
- name: Webserver
  hosts: all

  tasks:

  - name: Update packages
    become: yes
    apt:
      update_cache: true

  - name: Upgrade all packages to the latest version
    become: yes
    apt:
      upgrade: dist

  - name: Install packages
    become: yes
    apt:
      state: latest
      pkg:
        - python3-pip
        - python3-dev
        - python3-psycopg2
        - python3-venv
        - virtualenv
        - libpq-dev
        - postgresql
        - postgresql-contrib
        - nginx

  - name: Install django, green unicorn and psycopg2-binary
    pip:
      name:
        - django
        - gunicorn
        - psycopg2-binary
      virtualenv: /home/vagrant/.venv/django
      virtualenv_python: python3

  - name: make sure postgresql server is running
    service:
      name: postgresql
      state: started
      enabled: yes

  - name: Create database
    become: yes
    become_user: postgres
    postgresql_db:
      name: dbname
      state: present

  - name: Grant user access to db created
    become: yes
    become_user: postgres
    postgresql_user:
      db: dbname
      name: dbuser
      password: dbpassword
      priv: ALL
      state: present

  - name: Migrate
    django_manage:
      app_path: /vagrant/api
      command: migrate
      virtualenv: /home/vagrant/.venv/django

  - name: Copy gunicorn files
    become: yes
    copy:
      src: files/gunicorn/
      dest: /etc/systemd/system/

  - name: Copy nginx files
    become: yes
    copy:
      src: files/nginx/api
      dest: /etc/nginx/sites-available/api

  - name: Add symlink in sites-enabled
    become: yes
    file:
      src: /etc/nginx/sites-available/api
      dest: /etc/nginx/sites-enabled/api
      state: link
    notify:
      - restart nginx

  - name: Activate gunicorn socket
    become: yes
    service:
      name: gunicorn.socket
      enabled: yes
    notify:
      - restart gunicorn

  - name: Configure ufw defaults
    become: yes
    ufw: direction={{ item.direction }} policy={{ item.policy }}
    with_items:
      - { direction: 'incoming', policy: 'deny' }
      - { direction: 'outgoing', policy: 'allow' }
    notify:
      - restart ufw

  - name: Configure ufw
    become: yes
    ufw: rule={{ item.rule }} port={{ item.port }} proto={{ item.proto }}
    with_items:
      - { rule: 'limit', port: '{{ ssh_port | default("22") }}', proto: 'tcp' }
      - { rule: 'allow', port: '80', proto: 'tcp' }
      - { rule: 'allow', port: '443', proto: 'tcp' }
    notify:
      - restart ufw

  - name: Enable ufw
    become: yes
    ufw:
      state: enabled

  handlers:

  - name: restart nginx
    become: yes
    service:
      name: nginx
      state: restarted

  - name: restart gunicorn
    become: yes
    systemd:
      name: gunicorn
      daemon_reload: yes
      enabled: yes
      state: restarted

  - name: restart ufw
    become: yes
    service:
      name: ufw
      state: restarted
